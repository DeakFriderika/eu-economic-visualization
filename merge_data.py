import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# EU-tagorsz√°gok list√°ja (27 orsz√°g)
eu_countries = [
    "Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czechia",
    "Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
    "Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
    "Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
    "Slovenia", "Spain", "Sweden"
]

# ---------------------------------------------
# 1Ô∏è‚É£ GDP per capita adatok beolvas√°sa √©s tiszt√≠t√°sa
# ---------------------------------------------
gdp = pd.read_csv("GDP.csv")

# Oszlopok √°tnevez√©se: geo = orsz√°g, TIME_PERIOD = √©v, OBS_VALUE = √©rt√©k
gdp = gdp.rename(columns={
    "geo": "country",
    "TIME_PERIOD": "year",
    "OBS_VALUE": "gdp_per_capita"
})

# Csak EU-tagorsz√°gokat √©s 2013‚Äì2023 k√∂z√∂tti √©veket megtartva
gdp = gdp[gdp["country"].isin(eu_countries)]
gdp = gdp[gdp["year"].between(2013, 2023)]

# ---------------------------------------------
# 2Ô∏è‚É£ K√∂lts√©gvet√©si hi√°ny adatok beolvas√°sa √©s tiszt√≠t√°sa
# ---------------------------------------------
deficit = pd.read_csv("Koltsegvetesidef.csv")

deficit = deficit.rename(columns={
    "geo": "country",
    "TIME_PERIOD": "year",
    "OBS_VALUE": "budget_deficit"
})

deficit = deficit[deficit["country"].isin(eu_countries)]
deficit = deficit[deficit["year"].between(2013, 2023)]

# ---------------------------------------------
# 3Ô∏è‚É£ √Ållamad√≥ss√°g adatok beolvas√°sa √©s tiszt√≠t√°sa
# ---------------------------------------------
debt = pd.read_csv("Allamadossag.csv")

debt = debt.rename(columns={
    "geo": "country",
    "TIME_PERIOD": "year",
    "OBS_VALUE": "debt"
})

debt = debt[debt["country"].isin(eu_countries)]
debt = debt[debt["year"].between(2013, 2023)]

# ---------------------------------------------
# üîÑ 4Ô∏è‚É£ Adatok √∂sszef≈±z√©se orsz√°g + √©v alapj√°n
# ---------------------------------------------
merged = gdp.merge(deficit, on=["country", "year"])
merged = merged.merge(debt, on=["country", "year"])

# ---------------------------------------------
# üíæ 5Ô∏è‚É£ Ment√©s √∫j CSV f√°jlba
# ---------------------------------------------
merged.to_csv("eu_economic_summary.csv", index=False)

# CSV f√°jl beolvas√°sa
df = pd.read_csv("eu_economic_summary.csv")

# Adatok √°talak√≠t√°sa heatmap form√°tumra
debt_pivot = df.pivot(index="country", columns="year", values="debt")

# Heatmap k√©sz√≠t√©se
plt.figure(figsize=(15, 10))

# Heatmap rajzol√°sa
sns.heatmap(
    debt_pivot,
    annot=True,  # √ârt√©kek megjelen√≠t√©se
    fmt=".1f",   # Egy tizedesjegy
    cmap="RdYlGn_r",  # Piros-s√°rga-z√∂ld sz√≠nsk√°la (ford√≠tva)
    center=60,   # K√∂z√©ppont a 60%-n√°l (EU k√ºsz√∂b)
    cbar_kws={'label': '√Ållamad√≥ss√°g (% GDP)'}
)

# C√≠mek √©s c√≠mk√©k
plt.title("√Ållamad√≥ss√°g alakul√°sa az EU-tagorsz√°gokban (2013-2023)")
plt.xlabel("√âv")
plt.ylabel("Orsz√°g")
plt.tight_layout()

# Ment√©s
plt.savefig("debt_heatmap.png", bbox_inches='tight', dpi=300)
plt.close()

print("‚úÖ Az √°llamad√≥ss√°g heatmap sikeresen elk√©sz√ºlt!")
print("üìÅ Mentve: debt_heatmap.png")

# 2023-as adatok kinyer√©se
latest_data = df[df["year"] == 2023]

# Orsz√°gok kiv√°laszt√°sa GDP alapj√°n
highest_gdp_country = latest_data.loc[latest_data["gdp_per_capita"].idxmax(), "country"]
lowest_gdp_country = latest_data.loc[latest_data["gdp_per_capita"].idxmin(), "country"]

# √Åtlaghoz legk√∂zelebbi orsz√°g megtal√°l√°sa
mean_gdp = latest_data["gdp_per_capita"].mean()
average_gdp_country = latest_data.loc[(latest_data["gdp_per_capita"] - mean_gdp).abs().idxmin(), "country"]

# Kiv√°lasztott orsz√°gok adatai
selected_countries = [highest_gdp_country, average_gdp_country, lowest_gdp_country]
selected_data = latest_data[latest_data["country"].isin(selected_countries)]

# Adatok normaliz√°l√°sa 0-1 sk√°l√°ra
metrics = ["gdp_per_capita", "debt", "budget_deficit"]
normalized_data = {}

for metric in metrics:
    min_val = latest_data[metric].min()
    max_val = latest_data[metric].max()
    normalized_data[metric] = (selected_data[metric] - min_val) / (max_val - min_val)

# Radar chart k√©sz√≠t√©se
angles = np.linspace(0, 2*np.pi, len(metrics), endpoint=False)
angles = np.concatenate((angles, [angles[0]]))  # K√∂r bez√°r√°sa

fig, ax = plt.subplots(figsize=(10, 10), subplot_kw=dict(projection='polar'))

colors = ['#2ecc71', '#3498db', '#e74c3c']  # Z√∂ld, k√©k, piros
labels = ['GDP per f≈ë', '√Ållamad√≥ss√°g', 'K√∂lts√©gvet√©si hi√°ny']

for idx, country in enumerate(selected_countries):
    values = [normalized_data[metric].iloc[idx] for metric in metrics]
    values = np.concatenate((values, [values[0]]))  # K√∂r bez√°r√°sa
    
    ax.plot(angles, values, 'o-', linewidth=2, color=colors[idx], label=country)
    ax.fill(angles, values, alpha=0.25, color=colors[idx])

# C√≠mk√©k √©s form√°z√°s
ax.set_xticks(angles[:-1])
ax.set_xticklabels(labels)
ax.set_ylim(0, 1)
plt.title("Gazdas√°gi mutat√≥k √∂sszehasonl√≠t√°sa (2023)", pad=20)
plt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))

plt.tight_layout()
plt.savefig("economic_radar_chart.png", bbox_inches='tight', dpi=300)
plt.close()

print("‚úÖ A radar chart sikeresen elk√©sz√ºlt!")
print("üìÅ Mentve: economic_radar_chart.png")
print(f"\n√ñsszehasonl√≠tott orsz√°gok:")
print(f"üîº Legmagasabb GDP: {highest_gdp_country}")
print(f"‚û°Ô∏è √Åtlagos GDP: {average_gdp_country}")
print(f"üîΩ Legalacsonyabb GDP: {lowest_gdp_country}")
